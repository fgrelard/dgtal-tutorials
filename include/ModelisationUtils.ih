#include "DGtal/base/Common.h"
#include "DGtal/io/Display3DFactory.h"
// Shape construction
#include "DGtal/topology/LightImplicitDigitalSurface.h"
#include "DGtal/topology/DigitalSurface.h"
#include "DGtal/shapes/Shapes.h"
#include "DGtal/helpers/StdDefs.h"
#include "DGtal/images/ImageContainerBySTLVector.h"
// Drawing
#include "DGtal/io/boards/Board3D.h"
#include "DGtal/geometry/volumes/KanungoNoise.h"

#include "shapes/Ball.h"
#include "geometry/Distance.h"
#include "geometry/TangentUtils.h"
#include "DGtal/kernel/sets/DigitalSetInserter.h"

using namespace std;
using namespace DGtal;

template <typename Point>
void add(const Point& p, vector<Point> & v) {
	if (find(v.begin(), v.end(), p) != v.end()) {
		return;
	} else {
		v.push_back(p);
	}
}


/**
 * This function finds if the 6 neighbour of a given point p lie on the same orientation
 * If there are more than 2 direct neighbours, then we don't have the same orientation
 * that is to say we dont have a curve
 * This function allows to determine points which can be removed
 **/
template <typename Point>
bool sameDirection6Neighbour(const vector<Point> & v, Point & p) {
	typedef Z3i::Space Space;
	typedef MetricAdjacency<Space, 3> MetricAdjacency;

	vector<Point> neighbours6;
	for (auto it = v.begin(), itE = v.end(); it != itE; ++it) {
		if (MetricAdjacency::isAdjacentTo(*it, p) && *it != p) {
		    neighbours6.push_back(*it);
		}
	}
	bool sameDirection = true;
    if (neighbours6.size() == 0) return true;
	for (unsigned int i = 0; i < neighbours6.size() - 1; i++) {
		Point current = neighbours6[i];
		Point next = neighbours6[i+1];
		if (!current.myMarkedToDelete && !next.myMarkedToDelete && current[0] != next[0] && current[1] != next[1] && current[2] != next[2]) {
			sameDirection = false;
			p.myMarkedToDelete = true;
		}
	}
	return sameDirection;
}

/**
 * Allows to obtain a 26 connected curve
 **/
template <typename Point>
void construct26ConnectedCurve(vector<Point> & vectorPoints) {
	vectorPoints.erase(
		std::remove_if(
			vectorPoints.begin(), vectorPoints.end(), [&vectorPoints](Point& other) {
				//the points removed correspond to those having neighbours with different direction
				return (!sameDirection6Neighbour(vectorPoints, other));
				
			}
			),
		vectorPoints.end()
		);
}

template <typename Point>
void drawCircle(vector<Point> & vectorPoints, float radius, float cx, float cy, float z, float increment) {
    float x, y;
	double angle = 0.0;
    while (angle <= 2 * M_PI){
		x = radius * cos( angle );
		y = radius * sin( angle );
		add(Point((int)x+cx, (int)y+cy, (int)z), vectorPoints);
		angle += increment;
	}
	construct26ConnectedCurve(vectorPoints);

}

template <typename Point>
void drawEllipse(vector<Point>& vectorPoints, float a, float b, float cx, float cy, float cz, float increment) {
	for (float x = cx - a, xend = cx + a + 1; x < xend; x+=increment) {
		for (float y = cy - b, yend = cy + b +  1; y < yend; y+=increment) {
			if (Distance::euclideanDistance(x/a, y/b, cx/a, cy/b) <= 1) {
				add(Point(x, y, cz), vectorPoints);
			}
		}
	}
}

template <typename Point>
void drawEllipsoid(set<Point>& vectorPoints, float a, float b, float c, float cx, float cy, float cz, float increment) {
	Point center(cx/a, cy/b, cz/c);
	for (float x = cx - a, xend = cx + a + 1; x < xend; x+=increment) {
		for (float y = cy - b, yend = cy + b +  1; y < yend; y+=increment) {
			for (float z = cz - c, zend = cz + c +  1; z < zend; z+=increment) {
				Point current(x/a, y/b, z/c);
//				std::cout << Distance::euclideanDistance(center, current) << std::endl;
				if (Distance::euclideanDistance(center, current) <= 1) {
					vectorPoints.insert(Point(x,y,z));
				}
			}
		}
	}
}


void drawDisk(Eigen::Matrix<double, Eigen::Dynamic, 4> & m, double radius, double cx, double cy, double cz, long int &row, float increment) {
	for (float x = cx - radius, xend = cx + radius + 1; x < xend; x+=increment) {
		for (float y = cy - radius, yend = cy + radius +  1; y < yend; y+=increment) {
			if (Distance::euclideanDistance(x, y, cx, cy) <= radius) {
				m(row, 0) = x;
				m(row, 1) = y;
				m(row, 2) = cz;
				m(row, 3) = 1;
				row++;
				m.conservativeResize(row+1, 4);
			}
		}
	}
}

template <typename Point>
void drawDisk(vector<Point>& v, float radius, float cx, float cy, float cz, float increment) {
	for (float x = cx - radius, xend = cx + radius + 1; x < xend; x+=increment) {
		for (float y = cy - radius, yend = cy + radius +  1; y < yend; y+=increment) {
			if (Distance::euclideanDistance(x, y, cx, cy) <= radius) {
				add(Point(x, y, cz), v);
			}
		}
	}
}

template <typename Point>
void drawCone(vector<Point>& v, int length, float radius, float increment) {
	for (int i = 0; i < length; i++) {
		drawDisk(v, radius, 0, 0, i, increment);
		radius -= increment;
	}
}

template <typename Point>
void drawCylinder(vector<Point>& v, int length, float radius, float increment) {
	for (int i = 0; i < length; i++) {
		drawDisk(v, radius, 0, 0, i, increment);
	}
}




void drawCylinder(Eigen::Matrix<double, Eigen::Dynamic, 4> & m, int length, int radius, float rotationAngle, float increment) {
	int progress = 0;
	long int row = 0;
    while (progress < length) {
		if (progress % (length/10) != 0) {
			drawDisk(m, radius, 0, 0, progress, row, increment);
		} else {
			if (radius > 0.6 * length / 6) { 
				radius--;
			}
			drawDisk(m, radius, 0, 0, progress, row, increment);
		}
		progress++;
	}
	//Deletes last row
	m.conservativeResize(row, 4);
	//Rotation with rotationAngle
	Eigen::Affine3d rot(Eigen::AngleAxisd(rotationAngle, Eigen::Vector3d::UnitX()));
	if (rotationAngle != 0.0) {
		m = m * rot.matrix();
	}
}

template <typename Point>
void drawDeformedCylinder(vector<Point>& vectorPoints, int length, int radius, float increment) {
	int a = radius;
	int b = radius;
	for (int i = 0; i < length; i++) {
		drawEllipse(vectorPoints, a, b, 0, 0, i, increment);

		if (i % 3 == 0) {
			a -= rand() % 3 - 1;
			if (a <= 1) a = 2;
			b += rand() % 3 - 1;
			if (b<=1) b = 2;
		}
	}
}


/*
 * Radius  Winding : radius of the loop
 * RadiusSpiral: radius of the volume
 */
template <typename Point>
void createHelixCurve(vector<Point> & vectorPoints, int range, int radiusWinding, int radiusSpiral, int pitch, float increment) {
	for (float i=0.0f; i < range; i+=increment) {
		float centerx = radiusWinding * cos(i/pitch);
		float centery = radiusWinding * sin(i/pitch);
drawCircle(vectorPoints, radiusSpiral, centerx, centery, i, increment);
	}
}


/*
 * This function does not allow to set the spiral radius
 */
template <typename Point>
void createHelixCurve( vector<Point> &point, int range, int radius, int pitch, float increment) {
	for (float i=0.0; i < range; i+=increment) {
	    int x = radius * cos(i);
		int y = radius * sin(i);
		int z = pitch * i;
		Point p(x,y,z);
		add(p, point);
	}
}

template <typename Point>
void createStraightLine(vector<Point> & points, int range, float increment) {
	for (float i = 0; i < range; i+=increment) {
		Point p (0, 0, i);
	    add(p, points);
	}
}

template <typename Point>
double lengthHelixCurve(int range, int radius, int pitch) {
	return range * sqrt(pow(radius, 2) + pow(pitch, 2));
}

template <typename Point>
void createSyntheticAirwayTree(vector<Point> & v, int branchNumber, int lengthTrachea, int z, float rotationAngle, Point firstPoint, float increment) {
	if (branchNumber == 0) return;
	int radius = lengthTrachea / 6;
	cout << radius << " " << rotationAngle << firstPoint << endl;
	Eigen::Matrix<double, Eigen::Dynamic, 4> matrix(1, 4);
	//Creates a rotated cylinder
	drawCylinder(matrix, lengthTrachea, radius, rotationAngle, increment);
	//Filling the vector with points from matrix
	for (int i = 0; i < matrix.innerSize(); i++) {
		if (matrix(i, 0) != 0 || matrix(i, 1) != 0 || matrix(i, 2) != 0) {
			int posx = matrix(i, 0)+firstPoint[0];
			//Translation after rotation
			int posy = matrix(i, 1)+firstPoint[1];
			int posz = matrix(i, 2)+firstPoint[2];
			add(Point(posx, posy, posz), v);
		}
	}
	z += lengthTrachea;
	//Determining initial starting point for new branches
	firstPoint += Point(0, lengthTrachea * sin(rotationAngle), lengthTrachea * cos(rotationAngle));
	matrix.resize(0,0);
	createSyntheticAirwayTree(v, branchNumber - 1, lengthTrachea * 0.7, z, rotationAngle + 0.2 * M_PI, firstPoint, increment);
	createSyntheticAirwayTree(v, branchNumber - 1, lengthTrachea * 0.7, z, rotationAngle - 0.2 * M_PI, firstPoint, increment);
}

template <typename Point>
void createLogarithmicCurve(vector<Point> & curve, int range, float increment) {
	for (float i = 1; i < range; i+=increment) {
		float x = i;
		float y = i;
		float z = 20*log(i);
		add(Point((int)x, (int)y, (int)z), curve);
	}
}


template <typename Point>
void createContinuousLogarithmicCurve(vector<Point>& curve, int range, float increment) {
	for (float i = 1; i < range; i+=increment) {
		float x = i;
		float y = i;
		float z = 20*log(i);
		add(Point(x, y, z), curve);
	}
}

template <typename CurvePoint, typename Point>
void createVolumeFromCurve(const vector<CurvePoint> & curve, set<Point> & volume, int ballRadius) {
	vector<Ball<CurvePoint> > ballVector;
	for (const CurvePoint& point : curve) {
		ballVector.push_back(Ball<CurvePoint>(point, ballRadius));
	}
	for (const Ball<CurvePoint>& current : ballVector) {
		for (const CurvePoint& point : current.pointsInBall()) {
			volume.insert(point);
		}
	}
}

template <typename CurvePoint, typename Point>
void createHalfVolumeFromCurve(const vector<CurvePoint> & curve, set<Point> & volume, int ballRadius) {
	vector<Ball<CurvePoint> > ballVector;
	for (const CurvePoint& point : curve) {
		ballVector.push_back(Ball<CurvePoint>(point, ballRadius));
	}
	for (const Ball<CurvePoint>& current : ballVector) {
		for (const CurvePoint& point : current.pointsInHalfBall()) {
			volume.insert(point);
		}
	}
}


template <typename CurvePoint, typename Point>
void createRotatedVolumeFromCurve(const vector<CurvePoint>& curve, set<Point> & volume, int ballRadius, double angle, const Eigen::Vector3d& vectorRot) {
    typedef Ball<CurvePoint> Ball;
	typedef typename Point::Scalar Scalar;
	Eigen::Matrix<double, Eigen::Dynamic, 4> matrix(1, 4);
	long int row = 0;
		
	//drawDisk(matrix, 20.0, 0, 0, 0, row, 0.5);
	for (const CurvePoint& point : curve) {
		matrix.conservativeResize(row+1, 4);
		matrix(row, 0) = point[0];
		matrix(row, 1) = point[1];
		matrix(row, 2) = point[2];
		matrix(row, 3) = 1;
		row++;		
	}

	set<Point> rotatedCurves;
	Eigen::Affine3d rot(Eigen::AngleAxisd(angle, vectorRot));	
	Eigen::Matrix<double, Eigen::Dynamic, 4> m = matrix * rot.matrix();
	for (int i = 0; i < m.innerSize(); i++) {
		if (m(i, 0) != 0 || m(i, 1) != 0 || m(i, 2) != 0) {
			Scalar posx = m(i, 0);
			Scalar posy = m(i, 1);
			Scalar posz = m(i, 2) + 25;
		    rotatedCurves.insert({posx, posy, posz});
		}
	}

	for (auto it = rotatedCurves.begin(), ite = rotatedCurves.end();
		 it != ite; ++it) {
		Ball ball(*it, ballRadius);
		Point current = *it;
		vector<CurvePoint> pointsInBall = ball.pointsInBall();
		// drawEllipsoid(pointsInBall, 7, 10, 7, current[0], current[1], current[2], 0.5);
		volume.insert(pointsInBall.begin(), pointsInBall.end());
	}   
}

template <typename DigitalSet>
DigitalSet addNoise(const DigitalSet& set, float noise) {
	typedef DigitalSet Predicate;
	typedef KanungoNoise<Predicate, Z3i::Domain, DigitalSet> KanungoNoise;
	typedef typename DigitalSet::Space Space;
	typedef typename DigitalSet::Point Point;
	typedef ExactPredicateLpSeparableMetric<Space, Point::dimension> L2Metric;
	typedef MetricAdjacency<Space, 3> MetricAdjacency;
	L2Metric l2Metric;
	KanungoNoise kanungo(set, set.domain(), noise);
	DigitalSet set2(set.domain());

	DigitalSet neighbors(set.domain());
	DigitalSetInserter<DigitalSet> inserter(neighbors);
	for (auto it = set.begin(), ite = set.end(); it != ite; ++it) {
		MetricAdjacency::writeNeighbors(inserter, *it);
	}
    for (auto it = neighbors.begin(), itE = neighbors.end(); it != itE; ++it) {
		if (kanungo(*it)) {
			set2.insertNew(*it);
		}
	}
	return set2;
}

template <typename Point>
void create2DCurve(std::vector<Point> & digitalSet) {
	digitalSet.push_back({1,3});
	digitalSet.push_back({2,3});
	digitalSet.push_back({3,4});
	digitalSet.push_back({4,4});
	digitalSet.push_back({5,5});
	digitalSet.push_back({6,5});
	digitalSet.push_back({7,6});
	digitalSet.push_back({8,6});
	digitalSet.push_back({9,6});
}

template <typename DigitalSet, typename Board>
void create2DNaiveTangentsForVisu(const DigitalSet & points, Board& board) {
	board << points.domain() << points;
	auto nextIt = points.begin();
	for (auto it = points.begin(),
			 itE = points.end();
		 (++nextIt) != itE; ++it) {
		board.drawArrow((*it)[0], (*it)[1], (*nextIt)[0], (*nextIt)[1]);
	}
}


template <typename Pencil, typename Point>
void thinVolume(const vector<Point>& curve, set<Point>& volume, double radius) {
	vector<Pencil> tangents = TangentUtils::theoreticalTangentsOnBoudin<Pencil>(curve.begin(), curve.end(), 20.0);
	for (const Point& pointVolume : volume) {
		for (const auto& tangentAtPoint : tangents) {
			Point tangent = tangentAtPoint.getTangent();
			Point pointCurve = tangentAtPoint.getPoint();
			double d = tangent.dot((pointVolume - pointCurve));
			if (d==0.0) {
				if (Distance::euclideanDistance(pointCurve, pointVolume) > radius) {
					volume.erase(pointVolume);
				}
			}
		}
	}
}
