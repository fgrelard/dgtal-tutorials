/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ExactLpSeparableMetric.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/11/02
 *
 * Implementation of inline methods defined in ExactLpSeparableMetric.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "surface/SurfaceTraversal.h"
#include <vector>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p,  typename P>
inline
DGtal::GeodesicMetric<T,TGraph,p,P>::GeodesicMetric(const TGraph& aGraph) : myGraph(aGraph)
{
}
//------------------------------------------------------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p,  typename P>
inline
DGtal::GeodesicMetric<T,TGraph,p,P>::~GeodesicMetric()
{
}
//------------------------------------------------------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p,  typename P>
inline
typename DGtal::GeodesicMetric<T,TGraph,p,P>::RawValue
DGtal::GeodesicMetric<T,TGraph,p,P>::rawDistance (const Point &aP,
												  const Point &aQ) const
{
	if (aP == aQ) return 0;
	typename std::vector<Point> points = SurfaceTraversal::AStarAlgorithm(myGraph, aP, aQ);
	RawValue res= NumberTraits<RawValue>::ZERO;
	if (points.size() <= 1) {
		for (DGtal::Dimension d = 0; d < Point::dimension; ++d) {
			res += functions::power(static_cast<RawValue>(abs(aP[d]-aQ[d])), p);
		}
		return res;
	}
	
	Point previous = *(points.begin());
	for(typename std::vector<Point>::iterator it = (++points.begin()),
			ite = points.end(); it != ite; ++it)
    {
		for (DGtal::Dimension d = 0; d < Point::dimension; ++d) {
			res += functions::power(static_cast<RawValue>(abs((*it)[d]-previous[d])), p);
		}
		previous = *it;
	}
	return res;
}
//------------------------------------------------------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p,  typename P>
inline
typename DGtal::GeodesicMetric<T,TGraph,p,P>::Value
DGtal::GeodesicMetric<T,TGraph,p,P>::operator()(const Point &aP,
												const Point &aQ) const
{
	return std::pow( NumberTraits<RawValue>::castToDouble(rawDistance(aP,aQ)), 1.0/(double)p);
}
//------------------------------------------------------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p,  typename P>
inline
DGtal::Closest
DGtal::GeodesicMetric<T,TGraph,p,P>::closest (const Point &origin,
											  const Point &first,
											  const Point &second) const
{
	RawValue a=NumberTraits<RawValue>::ZERO,
		b=NumberTraits<RawValue>::ZERO;

	a = rawDistance(origin,first);
	b = rawDistance(origin,second);

	if (a<b)
		return ClosestFIRST;
	else
		if (a>b)
			return ClosestSECOND;
		else
			return ClosestBOTH;
}
//------------------------------------------------------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p,  typename P>
inline
typename DGtal::GeodesicMetric<T,TGraph,p,P>::Abscissa
DGtal::GeodesicMetric<T,TGraph,p,P>::binarySearchHidden(const Abscissa &udim,
														const Abscissa &vdim,
														const RawValue &nu,
														const RawValue &nv,
														const Abscissa &lower,
														const Abscissa &upper) const
{
	ASSERT(  (nu +  functions::power( static_cast<RawValue>(abs( udim - lower)),  p)) <
			 (nv +  functions::power( static_cast<RawValue>(abs( vdim - lower)), p)));

	//Recurrence stop
	if ( (upper - lower) <= NumberTraits<Abscissa>::ONE)
    {
		//testing upper
		RawValue nuUpdated = nu +  functions::power( static_cast<RawValue>(abs( udim - upper )), p);
		RawValue nvUpdated = nv +  functions::power( static_cast<RawValue>(abs( vdim - upper )), p);
		if (nuUpdated < nvUpdated)
			return upper;
		else
			return lower;
    }

	Abscissa mid = (lower + upper)/2;
	RawValue nuUpdated = nu +  functions::power( static_cast<RawValue>(abs( udim - mid )), p);
	RawValue nvUpdated = nv +  functions::power( static_cast<RawValue>(abs( vdim - mid )), p);

	//Recursive call
	if ( nuUpdated < nvUpdated)
		return binarySearchHidden(udim,vdim,nu,nv,mid,upper);
	else
		return binarySearchHidden(udim,vdim,nu,nv,lower,mid);

}
//------------------------------------------------------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p ,  typename P>
inline
bool
DGtal::GeodesicMetric<T,TGraph,p,P>::hiddenBy(const Point &u,
											  const Point &v,
											  const Point &w,
											  const Point &startingPoint,
											  const Point &endPoint,
											  const typename Point::UnsignedComponent dim) const
{
	//Interval bound for the binary search
	Abscissa lower = startingPoint[dim];
	Abscissa upper = endPoint[dim];

	//Partial norm computation (sum_{i!=dim}  |u_i-v_i|^p
	RawValue nu = NumberTraits<RawValue>::ZERO;
	RawValue nv = NumberTraits<RawValue>::ZERO;
	RawValue nw = NumberTraits<RawValue>::ZERO;
	for(DGtal::Dimension i  = 0 ; i < Point::dimension ; i++)
		if (i != dim)
		{
			nu += functions::power ( static_cast<RawValue>(abs(u[i] - startingPoint[i])), p);
			nv += functions::power ( static_cast<RawValue>(abs(v[i] - startingPoint[i])), p);
			nw += functions::power ( static_cast<RawValue>(abs(w[i] - startingPoint[i])), p);
		}

	//Abscissa of voronoi edges
	Abscissa uv,vw;
	RawValue dv,dw,du,ddv,ddw;

	//checking distances to lower bound
	du = nu + functions::power( static_cast<RawValue>(abs( u[dim] - lower)), p);
	dv = nv + functions::power( static_cast<RawValue>(abs( v[dim] - lower)), p);
	dw = nw + functions::power( static_cast<RawValue>(abs( w[dim] - lower)), p);

	//Precondition of binarySearchHidden is true
	if (du < dv )
    {
		uv = binarySearchHidden(u[dim],v[dim],nu,nv,lower,upper);
		if (dv < dw)
        {
			vw = binarySearchHidden(v[dim],w[dim],nv,nw,lower,upper); //precondition
			return (uv > vw);
        }

		if (dw > dv)
			return true;
		else
        {
			//check if uv + 1 is stricly in W

			//first, optimisation
			if (uv == upper) return true;

			//distances at uv+1
			ddv = nv + functions::power( static_cast<RawValue>(abs( v[dim] - uv -1)), p);
			ddw = nw + functions::power( static_cast<RawValue>(abs( w[dim] - uv -1)), p);
			if (ddw < ddv)
				return true;
			else
				return false;
        }
    }
	else  // du >= dv
    {
		if (dv <= dw)
			return false;
		else
			return true;
    }
}
//------------------------------------------------------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p,  typename P>
inline
void
DGtal::GeodesicMetric<T,TGraph,p,P>::selfDisplay ( std::ostream & out ) const
{
	out << "[GeodesicMetric] p="<<p;
}
//------------------------------------------------------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p,  typename P>
inline
bool
DGtal::GeodesicMetric<T,TGraph,p,P>::isValid() const
{
	return true;
}
//------------------------------------------------------------------------------
template <typename T, typename TGraph, DGtal::uint32_t p,  typename P>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const GeodesicMetric<T,TGraph,p,P> & object )
{
	object.selfDisplay( out );
	return out;
}
